# -*- coding: utf-8 -*-
"""Knn_practice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/117Y43Rb10G4jmAqeZiEDnr3EIWkSWgsR
"""

from typing import Counter
import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

def _manhattan_distance(ex1, ex2):
    '''Calcula a distância de Manhattan entre dois exemplos.'''
    return np.sum(np.abs(ex1 - ex2))

def _euclidean_distance(ex1, ex2):
    '''Calcula a distância de Euclidiana entre dois exemplos.'''
    return np.sqrt(np.sum((ex1 - ex2)**2))

def _minkowski_distance(p, ex1, ex2):
    '''Calcula a distância de Minkowski entre dois exemplos.'''
    if p < 1:
        raise ValueError("p deve ser maior ou igual a 1")
    return np.sum(np.abs(ex1 - ex2)**p)**(1/p)

def _distance(p, exemple_1, exemple_2):
    """Calcula a distância entre dois exemplos."""
    if p == 1:
        return _manhattan_distance(exemple_1, exemple_2)
    elif p == 2:
        return _euclidean_distance(exemple_1, exemple_2)
    else:
        return _minkowski_distance(p, exemple_1, exemple_2)
    # A distância de Minkowski D(p, q) = (Σ|p_i - q_i|^k)^(1/k)


# Implementação K-nearest neighbors, ou “K-vizinhos mais próximos” (KNN)
class KNNeighborsUE:
    """Implementação do algoritmo K-nearest neighbors, ou “K-vizinhos mais próximos” (KNN)."""
    def __init__(self, k=3, p=2.0):
        self.k = k
        self.p = p

    def fit(self, X_train, y_train):
        """Ajusta o modelo aos dados de treinamento."""
        self.X_train = np.array(X_train)
        self.y_train = np.array(y_train)

    def predict(self, X_test):
        """Faz previsões para os dados de teste."""
        predictions = [self._predict(new_exemple) for new_exemple in X_test]
        return np.array(predictions)

    def _predict(self, new_exemple):
        """Faz uma previsão para um único exemplo/única instância."""
        # Calcula a distância entre new_exemple e todos os exemplos no conjunto de treino
        distances = [_distance(self.p, new_exemple, instance_train) for instance_train in self.X_train]

        # Obtém os k vizinhos mais próximos
        k_indices = np.argsort(distances)[:self.k]
        k_nearest_labels = [self.y_train[i] for i in k_indices]

        # Retorna a etiqueta mais comum
        most_common = Counter(k_nearest_labels).most_common()
        return most_common[0][0]

    def score(self, X, y):
        """Calcula a exatidão do modelo."""
        y_pred = self.predict(X)
        accuracy = np.sum(y_pred == y) / len(y)
        return accuracy

''' Tratamento de dados '''
#data = pd.read_csv('sample_data/entrega_antecipada.csv', skiprows=1)
#data = pd.read_csv('sample_data/entrega_antecipada.csv')
data_entrega_antecipada = pd.read_csv('sample_data/entrega_antecipada.csv')
trash = data_entrega_antecipada.drop('ID',axis=1) # 'ID' é o nome da coluna no ficheiro csv

data_iris = pd.read_csv('sample_data/iris.csv')

data_rice = pd.read_csv('sample_data/rice.csv')

X_entrega_antecipada = data_entrega_antecipada.drop('class', axis=1)
y_entrega_antecipada = data_entrega_antecipada['class']

X_iris = data_iris.drop('class', axis=1)
y_iris = data_iris['class']

X_rice = data_rice.drop('class', axis=1)
y_rice = data_rice['class']

X_train, X_test, y_train, y_test = train_test_split(X_entrega_antecipada, y_entrega_antecipada, test_size=0.25, random_state=3)

X_train = np.array(X_train)
X_test = np.array(X_test)
y_train = np.array(y_train)
y_test = np.array(y_test)


# Modelos K-nearest neighbors, ou “K-vizinhos mais próximos”
def make_knn_models():
    '''Modelos KNN'''
    for(k,p) in [(1,1),(5,1),(9,1),(1,2),(5,2),(9,2)]:
        print(f"Modelo KNN com k={k} e p={p}")
        knn = KNNeighborsUE(k, p)

        knn.fit(X_train, y_train)
        knn.predict(X_test)

        accuracy_train = knn.score(X_train, y_train)
        print('Exatidão no conjunto de treino:', accuracy_train)
        accuracy_test = knn.score(X_test, y_test)
        print('Exatidão no conjunto de teste:', accuracy_test)

# Conjunto de dados Entrega Antecipada
for (X,y) in [(X_entrega_antecipada, y_entrega_antecipada),(X_iris,y_iris),(X_rice,y_rice)]:
    print(f"Conjunto de dados: {X.columns.values}")

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=3)

    X_train = np.array(X_train)
    X_test = np.array(X_test)
    y_train = np.array(y_train)
    y_test = np.array(y_test)

    make_knn_models()
    print()
    print()
    print()



from google.colab import drive
drive.mount('/content/drive')